---
name: Deployment lifecycle

on: ['deployment']

jobs:
  destroy-environment:
    if: github.event.deployment.task == 'destroy-environment'
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
        
      - name: Update deployment status (inactive)
        if: success()
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: "${{ github.token }}"
          state: "inactive"
          deployment_id: ${{ github.event.deployment.id }}
          description: ${{ github.event.deployment.description }}

      - name: Update Slack message with status
        uses: satak/webrequest-action@v1.2.3
        with:
          url: "${{ secrets.BASIC_AUTH_UN }}/updates/${{ github.event.deployment.payload.msg_ts }}"
          method: POST
          payload: '{"status": "success"}'
          
  deploy-environment:
    if: github.event.deployment.task == 'deploy-environment'
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      
      - name: Update deployment status (success)
        if: success()
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: "${{ github.token }}"
          state: "success"
          deployment_id: ${{ github.event.deployment.id }}
          description: ${{ github.event.deployment.description }}

#      - name: Initialize deployment status
#        uses: deliverybot/deployment-status@v1
#        with:
#          state: pending
#          token: ${{ github.token }}
#
#      - name: Checkout repo
#        uses: actions/checkout@v2
#
#      - name: Terraform Setup
#        uses: hashicorp/setup-terraform@v1
#
#      - name: Terraform Init
#        run: terraform init terraform/aws/environments/stage
#        env:
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#
#      - name: Create staging environment
#        if: github.event.deployment.payload.operation == 'create'
#        run: terraform apply -auto-approve terraform/aws/environments/stage
#        env:
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#
#      - name: Destroy staging environment
#        if: github.event.deployment.payload.operation == 'destroy'
#        run: terraform destroy -auto-approve terraform/aws/environments/stage
#        env:
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#
#      - name: Activate deployment
#        if: success()
#        uses: deliverybot/deployment-status@v1
#        with:
#          state: success
#          token: ${{ github.token }}
#
#      - name: Fail deployment
#        if: failure()
#        uses: deliverybot/deployment-status@v1
#        with:
#          state: failure
#          token: ${{ github.token }}
